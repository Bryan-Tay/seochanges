{"version":3,"sources":["components/Keywords/UserInput.js","components/Keywords/Results/ResultsDisplay.js","components/Keywords/Results/KeywordPageOneDisplay.js","components/Keywords/Coefficients.js","components/Keywords/Misc/CustomPrompt.js","components/Keywords/Results/RelatedKeywordRow.js","components/Keywords/Results/RelatedKeywordTable.js","components/Keywords/MainFunction.js","context/UserContext.js","components/NavBar.js","components/Login.js","App.js","index.js"],"names":["UserInput","setFormattedKeywords","setChosenLocation","setSubmitted","URL","setURL","useState","keywords","setKeywords","locations","Singapore","mangools","sem","Malaysia","Australia","Thailand","Vietnam","Japan","SouthKorea","Cambodia","HongKong","Taiwan","Laos","Indonesia","Philippines","Myanmar","Brunei","India","UnitedKingdom","UnitedStates","Russia","location","setLocation","className","onSubmit","e","replace","split","length","preventDefault","handleSubmit","FormControl","fullWidth","TextField","type","margin","label","placeholder","value","onChange","target","required","FormHelperText","InputLabel","Select","Object","keys","map","country","MenuItem","key","countryCode","toUpperCase","svg","style","width","height","marginRight","multiline","Button","variant","color","ResultsDisplay","load","handleShow","currentRanking","volume","FS","DF","allQ2","allQ3","allQ4","allUrls","extraKW","setExtraRelatedKeywords","extra","setExtra","TableContainer","Table","id","TableHead","TableRow","TableCell","TableBody","keyword","index","onClick","m","size","display","justifyContent","alignItems","Input","endAdornment","InputAdornment","position","TableExport","document","getElementById","classList","add","useStyles","makeStyles","theme","root","flexWrap","spacing","textField","backgroundColor","marginBottom","border","padding","KeywordPageOneDisplay","data","setShow","classes","float","top","cursor","items","item","hover","href","url","rel","moz","v","pda","upa","majestic","TrustFlow","CitationFlow","ExtBackLinks","fb","l","rank","r","CustomPrompt","block","setBlock","open","setOpen","handleClose","when","message","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","RelatedKeywordRow","extraRelatedKeywords","disableButton","setDisableButton","text","setText","useEffect","kw","includes","disabled","sv","seo","RelatedKeywordTable","displayRelatedKeywords","process","slice","easy","setEasy","medium","setMedium","hard","setHard","sort","a","b","Math","floor","c","KEY","MainFunction","page","DA","PA","CF","TF","LINKS","FB","LPS","setFS","setAllUrls","setVolume","setAllQ2","setAllQ3","setAllQ4","setCurrentRanking","setDF","show","setData","displayKeyword","setDisplayKeyword","displayData","setDisplayData","credit","setCredit","setLoad","errorMessage","setErrorMessage","loadMessage","setLoadMessage","relatedKeywords","setRelatedKeywords","setDisplayRelatedKeywords","setExtraKW","prevKeywords","arr","ref","useRef","current","usePrevious","getFS","da","pa","cf","tf","links","lps","emd","checkEMD","tempURL","hostname","match","substr","indexOf","getSvrk","i","axios","method","headers","svrkResponse","tempKW","filter","elem","console","log","fetchClient","q2","q3","q4","values","response","fetchData","res","res2","exit","j","domain","res3","res4","res5","push","temp","reduce","UserContext","createContext","flexGrow","title","fontWeight","NavBar","user","useContext","AppBar","Toolbar","to","Login","setUser","status","setStatus","username","setUsername","password","setPassword","event","toLowerCase","sessionStorage","setItem","handleLogout","clear","charAt","createMuiTheme","palette","primary","cyan","secondary","red","App","getItem","submitted","chosenLocation","formattedKeywords","Provider","ThemeProvider","Container","maxWidth","path","exact","ReactDOM","render"],"mappings":"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","file":"static/js/main.afe0a67c.chunk.js","sourcesContent":["// After logging in, the user can access this page and fill up the form. Keywords and URLs are required for this timeline analysis.\r\n\r\nimport React, { useState } from \"react\";\r\nimport {\r\n    FormControl,\r\n    MenuItem,\r\n    Select,\r\n    InputLabel,\r\n    TextField,\r\n    Button,\r\n    FormHelperText,\r\n} from \"@material-ui/core\"; // Material UI components.\r\n\r\nimport ReactCountryFlag from \"react-country-flag\";\r\n\r\nconst UserInput = ({\r\n    setFormattedKeywords,\r\n    setChosenLocation,\r\n    setSubmitted,\r\n    URL,\r\n    setURL,\r\n}) => {\r\n    const [keywords, setKeywords] = useState(); // Unformatted keywords to check.\r\n    const locations = {\r\n        // Location data. The \"sem\" part is used for search volume, but we are currently out of credits.\r\n        Singapore: { mangools: 2702, sem: \"sg\" },\r\n        Malaysia: { mangools: 2458, sem: \"my\" },\r\n        Australia: { mangools: 2036, sem: \"au\" },\r\n        Thailand: { mangools: 2764, sem: \"th\" },\r\n        Vietnam: { mangools: 2704, sem: \"vn\" },\r\n        Japan: { mangools: 2392, sem: \"jp\" },\r\n        SouthKorea: { mangools: 2410, sem: \"kr\" },\r\n        Cambodia: { mangools: 2116, sem: \"kh\" },\r\n        HongKong: { mangools: 2344, sem: \"hk\" },\r\n        Taiwan: { mangools: 2158, sem: \"tw\" },\r\n        Laos: { mangools: 2418, sem: \"la\" },\r\n        Indonesia: { mangools: 2360, sem: \"id\" },\r\n        Philippines: { mangools: 2608, sem: \"ph\" },\r\n        Myanmar: { mangools: 2104, sem: \"mm\" },\r\n        Brunei: { mangools: 2096, sem: \"bn\" },\r\n        India: { mangools: 2356, sem: \"in\" },\r\n        UnitedKingdom: { mangools: 2826, sem: \"gb\" },\r\n        UnitedStates: { mangools: 2840, sem: \"us\" },\r\n        Russia: { mangools: 2643, sem: \"ru\" },\r\n    }; // List of location\r\n    const [location, setLocation] = useState(\"Singapore\"); // Selected location. Default Singapore.\r\n\r\n    const handleSubmit = (e) => {\r\n        // From submit control. Also sets the location based on user selected country.\r\n        setSubmitted(true);\r\n        switch (location) {\r\n            case \"Singapore\":\r\n                setChosenLocation(locations.Singapore);\r\n                break;\r\n            case \"Malaysia\":\r\n                setChosenLocation(locations.Malaysia);\r\n                break;\r\n            case \"Australia\":\r\n                setChosenLocation(locations.Australia);\r\n                break;\r\n            case \"Thailand\":\r\n                setChosenLocation(locations.Thailand);\r\n                break;\r\n            case \"Vietnam\":\r\n                setChosenLocation(locations.Vietnam);\r\n                break;\r\n            case \"Japan\":\r\n                setChosenLocation(locations.Japan);\r\n                break;\r\n            case \"SouthKorea\":\r\n                setChosenLocation(locations.SouthKorea);\r\n                break;\r\n            case \"HongKong\":\r\n                setChosenLocation(locations.HongKong);\r\n                break;\r\n            case \"Cambodia\":\r\n                setChosenLocation(locations.Cambodia);\r\n                break;\r\n            case \"Laos\":\r\n                setChosenLocation(locations.Laos);\r\n                break;\r\n            case \"Indonesia\":\r\n                setChosenLocation(locations.Indonesia);\r\n                break;\r\n            case \"Philippines\":\r\n                setChosenLocation(locations.Philippines);\r\n                break;\r\n            case \"Myanmar\":\r\n                setChosenLocation(locations.Myanmar);\r\n                break;\r\n            case \"Brunei\":\r\n                setChosenLocation(locations.Brunei);\r\n                break;\r\n            case \"India\":\r\n                setChosenLocation(locations.India);\r\n                break;\r\n            case \"UnitedKingdom\":\r\n                setChosenLocation(locations.UnitedKingdom);\r\n                break;\r\n            case \"UnitedStates\":\r\n                setChosenLocation(locations.UnitedStates);\r\n                break;\r\n            case \"Russia\":\r\n                setChosenLocation(locations.Russia);\r\n                break;\r\n            case \"Taiwan\":\r\n                setChosenLocation(locations.Taiwan);\r\n                break;\r\n            default:\r\n                setChosenLocation(locations.Singapore);\r\n        }\r\n        setFormattedKeywords(keywords.replace(/\\n/g, \",\").split(\",\")); // Formats the keyword by removing new line \\n.\r\n        if (URL[URL.length - 1] !== \"/\") {\r\n            setURL(`${URL}/`);\r\n        }\r\n        e.preventDefault();\r\n    };\r\n    return (\r\n        <div className='userInput'>\r\n            <form // Main form.\r\n                onSubmit={(e) => {\r\n                    handleSubmit(e);\r\n                }}\r\n            >\r\n                <FormControl fullWidth>\r\n                    <TextField // Input for URL.\r\n                        type='url'\r\n                        margin='normal'\r\n                        label='URL'\r\n                        placeholder='Example: https://mediaonemarketing.com.sg/'\r\n                        fullWidth\r\n                        value={URL}\r\n                        onChange={(e) => setURL(e.target.value)}\r\n                        required\r\n                    />\r\n                    <FormHelperText>\r\n                        Please include \"http://\" or \"htts://\". Example:\r\n                        https://mediaonemarketing.com.sg/\r\n                    </FormHelperText>\r\n                </FormControl>\r\n                <FormControl fullWidth margin='normal'>\r\n                    <InputLabel required>Country</InputLabel>\r\n                    <Select\r\n                        value={location}\r\n                        onChange={(e) => setLocation(e.target.value)}\r\n                    >\r\n                        {Object.keys(locations).map((country) => {\r\n                            // Input for Country\r\n                            return (\r\n                                <MenuItem value={country} key={country}>\r\n                                    <ReactCountryFlag\r\n                                        countryCode={locations[\r\n                                            country\r\n                                        ].sem.toUpperCase()}\r\n                                        svg\r\n                                        style={{\r\n                                            width: \"1.5em\",\r\n                                            height: \"1.5em\",\r\n                                            marginRight: \"10px\",\r\n                                        }}\r\n                                    />\r\n                                    {country}\r\n                                </MenuItem>\r\n                            );\r\n                        })}\r\n                    </Select>\r\n                    <FormHelperText>\r\n                        Please run this one by one for multiple countries.\r\n                    </FormHelperText>\r\n                </FormControl>\r\n                <FormControl fullWidth margin='normal'>\r\n                    <TextField // Input for Keywords\r\n                        type='text'\r\n                        label='Keywords'\r\n                        placeholder='Example: seo services singapore'\r\n                        multiline\r\n                        fullWidth\r\n                        value={keywords}\r\n                        onChange={(e) => setKeywords(e.target.value)}\r\n                        required\r\n                    />\r\n                    <FormHelperText>\r\n                        Separate each keyword with a comma or enter each keyword\r\n                        on a new line.\r\n                    </FormHelperText>\r\n                </FormControl>\r\n                <div>\r\n                    <Button type='submit' variant='contained' color='primary'>\r\n                        {/* Submit Button */}\r\n                        Submit\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserInput;\r\n","import React, { useState } from \"react\";\r\nimport TableExport from \"tableexport\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nimport {\r\n    Table,\r\n    TableCell,\r\n    TableBody,\r\n    TableHead,\r\n    TableRow,\r\n    TableContainer,\r\n    Button,\r\n    FormControl,\r\n    Input,\r\n    InputAdornment,\r\n    InputLabel,\r\n} from \"@material-ui/core\";\r\nimport KeyboardReturnIcon from \"@material-ui/icons/KeyboardReturn\";\r\n\r\nconst ResultsDisplay = ({\r\n    keywords,\r\n    load,\r\n    handleShow,\r\n    currentRanking,\r\n    volume,\r\n    FS,\r\n    DF,\r\n    allQ2,\r\n    allQ3,\r\n    allQ4,\r\n    allUrls,\r\n    extraKW,\r\n    setExtraRelatedKeywords,\r\n}) => {\r\n    const [extra, setExtra] = useState();\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setExtraRelatedKeywords(extra);\r\n        setExtra(\"\");\r\n    };\r\n    return (\r\n        <div>\r\n            <TableContainer>\r\n                <Table id='main-table'>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Keyword</TableCell>\r\n                            <TableCell>Current Rank</TableCell>\r\n                            <TableCell>Search Volume</TableCell>\r\n                            <TableCell>4 - 6 Mths</TableCell>\r\n                            <TableCell>7 - 9 Mths</TableCell>\r\n                            <TableCell>9 - 12 Mths</TableCell>\r\n                            <TableCell>12+ Mths</TableCell>\r\n                            <TableCell>URL</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {keywords ? (\r\n                            keywords.map((keyword, index) => {\r\n                                return (\r\n                                    <TableRow key={index}>\r\n                                        <TableCell>\r\n                                            {load ? (\r\n                                                <Button\r\n                                                    onClick={() => {\r\n                                                        handleShow(index);\r\n                                                    }}\r\n                                                    variant='outlined'\r\n                                                    color='primary'\r\n                                                >\r\n                                                    {keyword}\r\n                                                </Button>\r\n                                            ) : (\r\n                                                <Button>{keyword}</Button>\r\n                                            )}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {currentRanking[index]}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {volume[index]\r\n                                                ? volume[index]\r\n                                                : \"-\"}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {FS[index] * DF[index] >=\r\n                                            allQ2[index]\r\n                                                ? \"✔\"\r\n                                                : \"\"}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {FS[index] * DF[index] <\r\n                                                allQ2[index] &&\r\n                                            FS[index] * DF[index] >=\r\n                                                allQ3[index]\r\n                                                ? \"✔\"\r\n                                                : \"\"}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {FS[index] * DF[index] <\r\n                                                allQ3[index] &&\r\n                                            FS[index] * DF[index] >=\r\n                                                allQ4[index]\r\n                                                ? \"✔\"\r\n                                                : \"\"}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {FS[index] * DF[index] <\r\n                                            allQ4[index]\r\n                                                ? \"✔\"\r\n                                                : \"\"}\r\n                                        </TableCell>\r\n                                        <TableCell>{allUrls[index]}</TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                            })\r\n                        ) : (\r\n                            <div m='auto'>\r\n                                <ClipLoader size={50} color={\"#123abc\"} />\r\n                            </div>\r\n                        )}\r\n                        {extraKW ? (\r\n                            extraKW.map((keyword, index) => {\r\n                                return (\r\n                                    <TableRow key={index + keywords.length}>\r\n                                        <TableCell>\r\n                                            {load ? (\r\n                                                <Button\r\n                                                    onClick={() => {\r\n                                                        handleShow(\r\n                                                            index +\r\n                                                                keywords.length\r\n                                                        );\r\n                                                    }}\r\n                                                    variant='outlined'\r\n                                                    color='primary'\r\n                                                >\r\n                                                    {keyword}\r\n                                                </Button>\r\n                                            ) : (\r\n                                                <Button>{keyword}</Button>\r\n                                            )}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {\r\n                                                currentRanking[\r\n                                                    index + keywords.length\r\n                                                ]\r\n                                            }\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {volume[index + keywords.length]\r\n                                                ? volume[\r\n                                                      index + keywords.length\r\n                                                  ]\r\n                                                : \"-\"}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {FS[index + keywords.length] *\r\n                                                DF[index + keywords.length] >=\r\n                                            allQ2[index + keywords.length]\r\n                                                ? \"✔\"\r\n                                                : \"\"}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {FS[index + keywords.length] *\r\n                                                DF[index + keywords.length] <\r\n                                                allQ2[\r\n                                                    index + keywords.length\r\n                                                ] &&\r\n                                            FS[index + keywords.length] *\r\n                                                DF[index + keywords.length] >=\r\n                                                allQ3[index + keywords.length]\r\n                                                ? \"✔\"\r\n                                                : \"\"}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {FS[index + keywords.length] *\r\n                                                DF[index + keywords.length] <\r\n                                                allQ3[\r\n                                                    index + keywords.length\r\n                                                ] &&\r\n                                            FS[index + keywords.length] *\r\n                                                DF[index + keywords.length] >=\r\n                                                allQ4[index + keywords.length]\r\n                                                ? \"✔\"\r\n                                                : \"\"}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {FS[index + keywords.length] *\r\n                                                DF[index + keywords.length] <\r\n                                            allQ4[index + keywords.length]\r\n                                                ? \"✔\"\r\n                                                : \"\"}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {allUrls[index + keywords.length]}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                            })\r\n                        ) : (\r\n                            <div m='auto'>\r\n                                <ClipLoader size={50} color={\"#123abc\"} />\r\n                            </div>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                }}\r\n            >\r\n                <form // Main form.\r\n                    onSubmit={(e) => {\r\n                        handleSubmit(e);\r\n                    }}\r\n                    style={{ margin: \"20px 0\" }}\r\n                >\r\n                    <FormControl>\r\n                        <InputLabel>Add More Keywords</InputLabel>\r\n                        <Input // Input for URL.\r\n                            type='text'\r\n                            margin='dense'\r\n                            placeholder='i.e. seo services singapore'\r\n                            value={extra}\r\n                            onChange={(e) => setExtra(e.target.value)}\r\n                            style={{ width: \"300px\" }}\r\n                            endAdornment={\r\n                                <InputAdornment position='end'>\r\n                                    <KeyboardReturnIcon />\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    </FormControl>\r\n                </form>\r\n                <Button\r\n                    variant='contained'\r\n                    id='export-button'\r\n                    color='primary'\r\n                    onClick={() => {\r\n                        TableExport(document.getElementById(\"main-table\"));\r\n                        document\r\n                            .getElementById(\"export-button\")\r\n                            .classList.add(\"exported\");\r\n                    }}\r\n                    className='export-button'\r\n                >\r\n                    Export\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultsDisplay;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n    Table,\r\n    TableCell,\r\n    TableBody,\r\n    TableHead,\r\n    TableRow,\r\n    TableContainer,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        backgroundColor: \"aliceblue\",\r\n        marginBottom: \"20px\",\r\n        border: \"1px solid cadetblue\",\r\n        padding: \"0 10px\",\r\n    },\r\n}));\r\n\r\nconst KeywordPageOneDisplay = ({ keyword, data, setShow }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <h2>\r\n                Keyword: {keyword}\r\n                <span\r\n                    style={{\r\n                        float: \"right\",\r\n                        position: \"relative\",\r\n                        top: \"-15px\",\r\n                        color: \"maroon\",\r\n                        cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                        setShow(false);\r\n                    }}\r\n                >\r\n                    X\r\n                </span>\r\n            </h2>\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>URL</TableCell>\r\n                            <TableCell>DA</TableCell>\r\n                            <TableCell>PA</TableCell>\r\n                            <TableCell>TF</TableCell>\r\n                            <TableCell>CF</TableCell>\r\n                            <TableCell>Links</TableCell>\r\n                            <TableCell>FB</TableCell>\r\n                            <TableCell>LPS</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data[0].items.map((item, index) => {\r\n                            return (\r\n                                <TableRow key={index} hover={true}>\r\n                                    <TableCell>\r\n                                        <a\r\n                                            href={item.url}\r\n                                            rel='nofollow external noopener noreferrer'\r\n                                            target='_blank'\r\n                                        >\r\n                                            {item.url}\r\n                                        </a>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {item.m.moz.v.pda\r\n                                            ? item.m.moz.v.pda\r\n                                            : \"\"}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {item.m.moz.v.upa\r\n                                            ? item.m.moz.v.upa\r\n                                            : \"\"}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {item.m.majestic.v.TrustFlow\r\n                                            ? item.m.majestic.v.TrustFlow\r\n                                            : \"\"}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {item.m.majestic.v.CitationFlow\r\n                                            ? item.m.majestic.v.CitationFlow\r\n                                            : \"\"}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {item.m.majestic.v.ExtBackLinks\r\n                                            ? item.m.majestic.v.ExtBackLinks\r\n                                            : \"\"}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {item.m.fb ? item.m.fb.v.l : \"\"}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {item.m.rank.v.r ? item.m.rank.v.r : \"\"}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default KeywordPageOneDisplay;\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { FormControl, TextField } from \"@material-ui/core\";\r\n\r\n// Styles for label\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    textField: {\r\n        width: \"15ch\",\r\n    },\r\n}));\r\n\r\nconst Coefficients = ({\r\n    DA,\r\n    setDA,\r\n    PA,\r\n    setPA,\r\n    CF,\r\n    setCF,\r\n    TF,\r\n    setTF,\r\n    LINKS,\r\n    setLINKS,\r\n    FB,\r\n    setFB,\r\n    LPS,\r\n    setLPS,\r\n}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div>\r\n                <h2>Change Coefficients here:</h2>\r\n            </div>\r\n            <div>\r\n                <FormControl>\r\n                    <TextField\r\n                        label='Domain Authority'\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant='outlined'\r\n                        value={DA}\r\n                        onChange={(e) => setDA(e.target.value)}\r\n                    />\r\n                </FormControl>\r\n                <FormControl>\r\n                    <TextField\r\n                        label='Page Authority'\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant='outlined'\r\n                        value={PA}\r\n                        onChange={(e) => setPA(e.target.value)}\r\n                    />\r\n                </FormControl>\r\n                <FormControl>\r\n                    <TextField\r\n                        label='Citation Flow'\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant='outlined'\r\n                        value={CF}\r\n                        onChange={(e) => setCF(e.target.value)}\r\n                    />\r\n                </FormControl>\r\n                <FormControl>\r\n                    <TextField\r\n                        label='Trust Flow'\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant='outlined'\r\n                        value={TF}\r\n                        onChange={(e) => setTF(e.target.value)}\r\n                    />\r\n                </FormControl>\r\n                <FormControl>\r\n                    <TextField\r\n                        label='Links'\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant='outlined'\r\n                        value={LINKS}\r\n                        onChange={(e) => setLINKS(e.target.value)}\r\n                    />\r\n                </FormControl>\r\n                <FormControl>\r\n                    <TextField\r\n                        label='Facebook Shares'\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant='outlined'\r\n                        value={FB}\r\n                        onChange={(e) => setFB(e.target.value)}\r\n                    />\r\n                </FormControl>\r\n                <FormControl>\r\n                    <TextField\r\n                        label='Mangools LPS'\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        variant='outlined'\r\n                        value={LPS}\r\n                        onChange={(e) => setLPS(e.target.value)}\r\n                    />\r\n                </FormControl>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Coefficients;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport { Prompt } from \"react-router-dom\";\r\n\r\nconst CustomPrompt = () => {\r\n    const [block, setBlock] = useState(true);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n        return false;\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Prompt when={block} message={handleOpen} />\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby='alert-dialog-title'\r\n                aria-describedby='alert-dialog-description'\r\n            >\r\n                <DialogTitle id='alert-dialog-title'>\r\n                    {\"There might be unsaved changes.\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id='alert-dialog-description'>\r\n                        Are you sure you want to leave?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color='primary'>\r\n                        Dismiss\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            handleClose();\r\n                            setBlock(false);\r\n                        }}\r\n                        color='primary'\r\n                        autoFocus\r\n                    >\r\n                        OK\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomPrompt;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, TableCell, TableRow } from \"@material-ui/core\";\r\n\r\nconst RelatedKeywordRow = ({\r\n    keywords,\r\n    keyword,\r\n    index,\r\n    setExtraRelatedKeywords,\r\n    load,\r\n    extraRelatedKeywords,\r\n}) => {\r\n    const [disableButton, setDisableButton] = useState(false);\r\n    const [text, setText] = useState(\"Add\");\r\n\r\n    useEffect(() => {\r\n        setDisableButton(false);\r\n        setText(\"Add\");\r\n    }, [keyword]);\r\n    return (\r\n        <TableRow key={index} hover={true}>\r\n            <TableCell>{keyword.kw}</TableCell>\r\n            <TableCell>\r\n                {keywords.includes(keyword.kw) ? (\r\n                    <Button>Added!</Button>\r\n                ) : extraRelatedKeywords.includes(keyword.kw) ? (\r\n                    <Button>Added!</Button>\r\n                ) : (\r\n                    <Button\r\n                        variant={\r\n                            load\r\n                                ? disableButton\r\n                                    ? \"contained\"\r\n                                    : \"outlined\"\r\n                                : \"contained\"\r\n                        }\r\n                        color='primary'\r\n                        disabled={load ? (disableButton ? true : false) : true}\r\n                        onClick={() => {\r\n                            setExtraRelatedKeywords(keyword.kw);\r\n                            setDisableButton(true);\r\n                            setText(\"Added!\");\r\n                        }}\r\n                    >\r\n                        {text}\r\n                    </Button>\r\n                )}\r\n            </TableCell>\r\n            <TableCell>{keyword.sv}</TableCell>\r\n            <TableCell>{keyword.seo}</TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default RelatedKeywordRow;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport RelatedKeywordRow from \"./RelatedKeywordRow\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n    Table,\r\n    TableCell,\r\n    TableBody,\r\n    TableHead,\r\n    TableRow,\r\n    TableContainer,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        backgroundColor: \"aliceblue\",\r\n        margin: \"0px 1px 20px 1px\",\r\n        border: \"1px solid cadetblue\",\r\n        padding: \"2px 10px\",\r\n    },\r\n}));\r\n\r\nconst RelatedKeywordTable = ({\r\n    displayRelatedKeywords,\r\n    setExtraRelatedKeywords,\r\n    load,\r\n    keywords,\r\n    extraRelatedKeywords,\r\n    text,\r\n}) => {\r\n    const classes = useStyles();\r\n    let process = displayRelatedKeywords.slice(1);\r\n    const [easy, setEasy] = useState();\r\n    const [medium, setMedium] = useState();\r\n    const [hard, setHard] = useState();\r\n    useEffect(() => {\r\n        process.sort((a, b) => a.seo - b.seo);\r\n        let a = process\r\n            .slice(0, Math.floor(process.length / 3))\r\n            .sort((a, b) => b.sv - a.sv);\r\n        let b = process\r\n            .slice(\r\n                Math.floor(process.length / 3) + 1,\r\n                Math.floor((process.length * 2) / 3)\r\n            )\r\n            .sort((a, b) => b.sv - a.sv);\r\n        let c = process\r\n            .slice(Math.floor((process.length * 2) / 3) + 1, process.length)\r\n            .sort((a, b) => b.sv - a.sv);\r\n        setEasy(a);\r\n        setMedium(b);\r\n        setHard(c);\r\n    }, [displayRelatedKeywords]);\r\n    return (\r\n        <div className={classes.root}>\r\n            <h2>{text} Competition</h2>\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Keyword</TableCell>\r\n                            <TableCell>Add to List</TableCell>\r\n                            <TableCell>Search Volume</TableCell>\r\n                            <TableCell>Difficulty</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {text === \"Low\" && easy ? (\r\n                            easy.map((keyword, index) => {\r\n                                return (\r\n                                    <RelatedKeywordRow\r\n                                        keyword={keyword}\r\n                                        index={index}\r\n                                        key={index}\r\n                                        setExtraRelatedKeywords={\r\n                                            setExtraRelatedKeywords\r\n                                        }\r\n                                        load={load}\r\n                                        keywords={keywords}\r\n                                        extraRelatedKeywords={\r\n                                            extraRelatedKeywords\r\n                                        }\r\n                                    />\r\n                                );\r\n                            })\r\n                        ) : text === \"Medium\" && medium ? (\r\n                            medium.map((keyword, index) => {\r\n                                return (\r\n                                    <RelatedKeywordRow\r\n                                        keyword={keyword}\r\n                                        index={index}\r\n                                        key={index}\r\n                                        setExtraRelatedKeywords={\r\n                                            setExtraRelatedKeywords\r\n                                        }\r\n                                        load={load}\r\n                                        keywords={keywords}\r\n                                        extraRelatedKeywords={\r\n                                            extraRelatedKeywords\r\n                                        }\r\n                                    />\r\n                                );\r\n                            })\r\n                        ) : hard ? (\r\n                            hard.map((keyword, index) => {\r\n                                return (\r\n                                    <RelatedKeywordRow\r\n                                        keyword={keyword}\r\n                                        index={index}\r\n                                        key={index}\r\n                                        setExtraRelatedKeywords={\r\n                                            setExtraRelatedKeywords\r\n                                        }\r\n                                        load={load}\r\n                                        keywords={keywords}\r\n                                        extraRelatedKeywords={\r\n                                            extraRelatedKeywords\r\n                                        }\r\n                                    />\r\n                                );\r\n                            })\r\n                        ) : (\r\n                            <TableRow>\r\n                                <TableCell></TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RelatedKeywordTable;\r\n","// After main form submission from UserInput.js, this component will render.\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport ResultsDisplay from \"./Results/ResultsDisplay\";\r\nimport Coefficients from \"./Coefficients\"; // Allows changing of coefficients\r\nimport KeywordPageOneDisplay from \"./Results/KeywordPageOneDisplay\"; // Allows showing the KeywordPageOneDisplay Component after everything is rendered on this page.\r\nimport CustomPrompt from \"./Misc/CustomPrompt\"; // Custom prompt when user tries to leave (in case they close the tab by accident).\r\nimport ClipLoader from \"react-spinners/ClipLoader\"; // Loading icon\r\nimport RelatedKeywordTable from \"./Results/RelatedKeywordTable\";\r\n\r\nlet KEY = process.env.REACT_APP_KEY; // SECRET KEY from .env (note: MUST start with REACT_APP_)\r\n\r\nconst MainFunction = ({ url, keywords, location }) => {\r\n    const usePrevious = (arr) => {\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n            ref.current = arr;\r\n        });\r\n        return ref.current;\r\n    };\r\n\r\n    // Main consolidation\r\n    let page = {}; // Not const because this is not a hook. We reset this everything the user resubmits the form.\r\n\r\n    // Coefficients // Currently disabled\r\n    const [DA, setDA] = useState(0.5);\r\n    const [PA, setPA] = useState(0.3);\r\n    const [CF, setCF] = useState(0.05);\r\n    const [TF, setTF] = useState(0.05);\r\n    const [LINKS, setLINKS] = useState(0.05);\r\n    const [FB, setFB] = useState(0.02);\r\n    const [LPS, setLPS] = useState(0.03);\r\n\r\n    // Client's Details\r\n    const [FS, setFS] = useState([]); // Final Score (FS) is the ultimate score we are comparing with.\r\n    const [allUrls, setAllUrls] = useState([]); // All the URLS from the API call to Mangools.\r\n\r\n    // Search Volume\r\n    const [volume, setVolume] = useState([]); //\r\n\r\n    // Page results\r\n    const [allQ2, setAllQ2] = useState([]); // 2nd Quarter (Q2): for comparison. results based on results ranked 6 to 10 (if available).\r\n    const [allQ3, setAllQ3] = useState([]); // 3rd Quarter (Q3): for comparison. results based on results ranked 11 to 15 (if available).\r\n    const [allQ4, setAllQ4] = useState([]); // 4th Quarter (Q4): for comparison. results based on results ranked 16 to 20 (if available).\r\n\r\n    // Current Ranking\r\n    const [currentRanking, setCurrentRanking] = useState([]); // Current ranking for all the keywords stored in an array.\r\n\r\n    // Distance Factoring\r\n    const [DF, setDF] = useState([]);\r\n\r\n    // Individual Keywords Component\r\n    const [show, setShow] = useState(false); // To render KeywordPageOneDisplay.js onClick of keyword.\r\n    const [data, setData] = useState([]); // Props for KeywordPageOneDisplay.js\r\n    const [displayKeyword, setDisplayKeyword] = useState(); // Single Keyword to display.\r\n    const [displayData, setDisplayData] = useState(); // Page 1 data of displayKeyword.\r\n\r\n    // Miscellaneous\r\n    const [credit, setCredit] = useState(0); // Keeps track of how many credits being used per search. Will be displayed at the top of the page.\r\n    const [load, setLoad] = useState(false); // Displays the loading icon when the functions are running.\r\n    const [errorMessage, setErrorMessage] = useState(null); // Displays any error message. Note that Error 429 means that we are out of credits.\r\n    const [loadMessage, setLoadMessage] = useState(\"\"); // Displays the loading message when the functions are running.\r\n\r\n    // Related Keywords\r\n    const [relatedKeywords, setRelatedKeywords] = useState([]);\r\n    const [extraRelatedKeywords, setExtraRelatedKeywords] = useState([]);\r\n    const [displayRelatedKeywords, setDisplayRelatedKeywords] = useState([]);\r\n    //\r\n    const [extraKW, setExtraKW] = useState([]);\r\n    const prevKeywords = usePrevious(extraRelatedKeywords);\r\n\r\n    // Function to check Final Score\r\n\r\n    const getFS = (da, pa, cf, tf, links, fb, lps, emd) => {\r\n        // Basically, the score from Mangools multiplied by the coefficients we set above.\r\n        let fs =\r\n            (da * DA +\r\n                pa * PA +\r\n                cf * CF +\r\n                tf * TF +\r\n                links * LINKS +\r\n                fb * FB +\r\n                lps * LPS) *\r\n            emd;\r\n        return fs;\r\n    };\r\n\r\n    const checkEMD = (keyword, tempURL) => {\r\n        // Function to get whether a domain is EMD or not\r\n        let hostname = new URL(tempURL).hostname;\r\n        if (hostname.includes(\"www.\")) {\r\n            hostname = hostname.slice(4);\r\n        }\r\n        let match = hostname.substr(0, hostname.indexOf(\".\"));\r\n        keyword = keyword.replace(/\\s+/g, \"\");\r\n        if (match.includes(keyword) || keyword.includes(match)) {\r\n            return 1.5;\r\n        } else {\r\n            return 0.5;\r\n        }\r\n    };\r\n\r\n    // Debug\r\n    /******************************** UseEffect: Fetch data on submit (from UserInput.js) ********************************/\r\n    useEffect(() => {\r\n        // Getting Search Volume + Related Keywords (svrk)\r\n        const getSvrk = async () => {\r\n            try {\r\n                for (let i = 0; i < keywords.length; i++) {\r\n                    let svrkResponse = await axios({\r\n                        // Calling the Mangools API to get the search volume for keywords[i].\r\n                        method: \"get\",\r\n                        url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/related-keywords/?kw=${keywords[i]}&location_id=${location.mangools}`,\r\n                        headers: {\r\n                            \"x-access-token\": KEY,\r\n                            \"Access-Control-Allow-Origin\": \"*\",\r\n                            \"Access-Control-Allow-Headers\":\r\n                                \"Content-Type, Authorization\",\r\n                        },\r\n                    });\r\n                    setVolume((volume) => [\r\n                        ...volume,\r\n                        svrkResponse.data.keywords[0].sv,\r\n                    ]);\r\n                    let tempKW = svrkResponse.data.keywords\r\n                        .filter((elem) => elem.seo)\r\n                        .slice(0, 100);\r\n\r\n                    setRelatedKeywords((relatedKeywords) => [\r\n                        ...relatedKeywords,\r\n                        tempKW,\r\n                    ]);\r\n                }\r\n            } catch (error) {\r\n                setErrorMessage(error.message);\r\n                console.log(error.message);\r\n            }\r\n        };\r\n\r\n        // Getting most relevant page of submitted data per keyword\r\n        const fetchClient = async () => {\r\n            try {\r\n                for (let i = 0; i < keywords.length; i++) {\r\n                    // For each keyword\r\n                    setCredit((credit) => credit + 1);\r\n                    page[keywords[i]] = {\r\n                        // Initialises an object in the \"page\" object.\r\n                        lps: 0,\r\n                        url: \"\",\r\n                        q2: 0,\r\n                        q3: 0,\r\n                        q4: 0,\r\n                        values: [],\r\n                    };\r\n\r\n                    let response = await axios({\r\n                        // Calling the Mangools API to get the most relevant page for keywords[i].\r\n                        method: \"get\",\r\n                        url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${url}%20${keywords[i]}&location_id=${location.mangools}`,\r\n                        headers: {\r\n                            \"x-access-token\": KEY,\r\n                            \"Access-Control-Allow-Origin\": \"*\",\r\n                            \"Access-Control-Allow-Headers\":\r\n                                \"Content-Type, Authorization\",\r\n                        },\r\n                    });\r\n\r\n                    // Setting URLs and LPS per keyword submitted\r\n\r\n                    page[keywords[i]].url = response.data[0].items[0].url;\r\n                    setAllUrls((allUrls) => [\r\n                        // Setting the URL for each keyword in the allUrls state.\r\n                        ...allUrls,\r\n                        response.data[0].items[0].url.slice(url.length - 1),\r\n                    ]);\r\n\r\n                    setFS((FS) => [\r\n                        // Getting the FS for each keyword and storing it in the \"FS\" state.\r\n                        ...FS,\r\n                        getFS(\r\n                            // Calls the getFS function and passes in the parameters based on results.\r\n                            response.data[0].items[0].m.moz.v.pda || 0,\r\n                            response.data[0].items[0].m.moz.v.upa || 0,\r\n                            response.data[0].items[0].m.majestic.v\r\n                                .CitationFlow || 0,\r\n                            response.data[0].items[0].m.majestic.v.TrustFlow ||\r\n                                0,\r\n                            response.data[0].items[0].m.majestic.v\r\n                                .ExtBackLinks || 0,\r\n                            response.data[0].items[0].m.fb.v.l || 0,\r\n                            response.data[0].items[0].m.rank.v.r || 0,\r\n                            checkEMD(keywords[i], url)\r\n                        ),\r\n                    ]);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                setErrorMessage(error.message);\r\n            }\r\n        };\r\n\r\n        /******************************** Getting Page 1 Info per keyword ********************************/\r\n        const fetchData = async () => {\r\n            try {\r\n                for (let i = 0; i < keywords.length; i++) {\r\n                    // Getting results for all keywords entered.\r\n                    setCredit((credit) => credit + 1);\r\n                    setLoadMessage(\"Fetching Page 1\");\r\n                    let res = await axios({\r\n                        // Fetching page 1 results for keywords[i].\r\n                        method: \"get\",\r\n                        url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${keywords[i]}&location_id=${location.mangools}`,\r\n                        headers: {\r\n                            \"x-access-token\": KEY,\r\n                            \"Access-Control-Allow-Origin\": \"*\",\r\n                            \"Access-Control-Allow-Headers\":\r\n                                \"Content-Type, Authorization\",\r\n                        },\r\n                    });\r\n                    setLoadMessage(\"Fetching Page 2\");\r\n                    setCredit((credit) => credit + 1);\r\n                    let res2 = await axios({\r\n                        // Fetching page 2 results for keywords[i].\r\n                        method: \"get\",\r\n                        url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${keywords[i]}&location_id=${location.mangools}&page=1`,\r\n                        headers: {\r\n                            \"x-access-token\": KEY,\r\n                            \"Access-Control-Allow-Origin\": \"*\",\r\n                            \"Access-Control-Allow-Headers\":\r\n                                \"Content-Type, Authorization\",\r\n                        },\r\n                    });\r\n\r\n                    setData((data) => [...data, res.data]); // Storing data as an object into the \"data\" state. Props for KeywordPageOneDisplay component.\r\n\r\n                    let exit = false;\r\n                    while (true) {\r\n                        setLoadMessage(`checking page 1`); // Settig load message.\r\n                        for (let j = 0; j < res.data[0].items.length; j++) {\r\n                            // Checking if the client appears on page 1.\r\n                            if (url.includes(res.data[0].items[j].domain)) {\r\n                                // If found, set the Distance Factor (DF) to 100 and stores in the DF array.\r\n                                setLoadMessage(`FOUND ON PAGE 1`);\r\n                                setDF((DF) => [...DF, 100]);\r\n                                setCurrentRanking((currentRanking) => [\r\n                                    ...currentRanking,\r\n                                    j + 1, // j + 1 will be their position on Google.\r\n                                ]);\r\n                                exit = true;\r\n                                break; // Breaks out of inner for loop.\r\n                            }\r\n                        }\r\n                        if (exit) {\r\n                            break; // Breaks out of outer while loop.\r\n                        }\r\n\r\n                        setLoadMessage(`checking page 2`); // Settig load message.\r\n                        for (let j = 0; j < res2.data[0].items.length; j++) {\r\n                            // Checking if the client appears on page 2.\r\n                            if (url.includes(res2.data[0].items[j].domain)) {\r\n                                // If found, set the Distance Factor (DF) to 1.8 and stores in the DF array.\r\n\r\n                                setDF((DF) => [...DF, 1.8]);\r\n                                setCurrentRanking((currentRanking) => [\r\n                                    ...currentRanking,\r\n                                    j + 11, // j + 11 will be their position on Google.\r\n                                ]);\r\n                                exit = true;\r\n                                break; // Breaks out of inner for loop.\r\n                            }\r\n                        }\r\n                        if (exit) {\r\n                            break; // Breaks out of outer while loop.\r\n                        }\r\n\r\n                        setLoadMessage(\"Fetching Page 3\");\r\n                        setCredit((credit) => credit + 1);\r\n                        let res3 = await axios({\r\n                            // Fetching page 3 results for keywords[i] if the client is not found on page 1 or 2.\r\n                            method: \"get\",\r\n                            url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${keywords[i]}&location_id=${location.mangools}&page=2`,\r\n                            headers: {\r\n                                \"x-access-token\": KEY,\r\n                                \"Access-Control-Allow-Origin\": \"*\",\r\n                                \"Access-Control-Allow-Headers\":\r\n                                    \"Content-Type, Authorization\",\r\n                            },\r\n                        });\r\n\r\n                        setLoadMessage(`checking page 3`);\r\n                        for (let j = 0; j < res3.data[0].items.length; j++) {\r\n                            // Checking if the client appears on page 3.\r\n                            if (url.includes(res3.data[0].items[j].domain)) {\r\n                                setDF((DF) => [...DF, 1.4]); // If found, set the Distance Factor (DF) to 1.4 and stores in the DF array.\r\n                                setCurrentRanking((currentRanking) => [\r\n                                    ...currentRanking,\r\n                                    j + 21, // i + 21 will be their position on Google.\r\n                                ]);\r\n                                exit = true;\r\n                                break; // Breaks out of inner for loop.\r\n                            }\r\n                        }\r\n                        if (exit) {\r\n                            break; // Breaks out of outer while loop.\r\n                        }\r\n\r\n                        setCredit((credit) => credit + 1);\r\n                        setLoadMessage(\"Fetching Page 4\");\r\n                        let res4 = await axios({\r\n                            // Fetching page 3 results for keywords[i] if the client is not found on page 1, 2, or 3.\r\n                            method: \"get\",\r\n                            url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${keywords[i]}&location_id=${location.mangools}&page=3`,\r\n                            headers: {\r\n                                \"x-access-token\": KEY,\r\n                                \"Access-Control-Allow-Origin\": \"*\",\r\n                                \"Access-Control-Allow-Headers\":\r\n                                    \"Content-Type, Authorization\",\r\n                            },\r\n                        });\r\n\r\n                        setLoadMessage(`checking page 4`);\r\n                        for (let j = 0; j < res4.data[0].items.length; j++) {\r\n                            // Checking if the client appears on page 4.\r\n                            if (url.includes(res4.data[0].items[j].domain)) {\r\n                                setDF((DF) => [...DF, 1.2]); // If found, set the Distance Factor (DF) to 1.2 and stores in the DF array.\r\n                                setCurrentRanking((currentRanking) => [\r\n                                    ...currentRanking,\r\n                                    j + 31, // i + 31 will be their position on Google.\r\n                                ]);\r\n                                exit = true;\r\n                                break; // Breaks out of inner for loop.\r\n                            }\r\n                        }\r\n                        if (exit) {\r\n                            break; // Breaks out of outer while loop.\r\n                        }\r\n                        setCredit((credit) => credit + 1);\r\n                        setLoadMessage(\"Fetching Page 5\");\r\n                        let res5 = await axios({\r\n                            // Fetching page 3 results for keywords[i] if the client is not found on page 1, 2, 3, or 4.\r\n                            method: \"get\",\r\n                            url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${keywords[i]}&location_id=${location.mangools}&page=4`,\r\n                            headers: {\r\n                                \"x-access-token\": KEY,\r\n                                \"Access-Control-Allow-Origin\": \"*\",\r\n                                \"Access-Control-Allow-Headers\":\r\n                                    \"Content-Type, Authorization\",\r\n                            },\r\n                        });\r\n\r\n                        setLoadMessage(`checking page 5`);\r\n                        for (let j = 0; j < res5.data[0].items.length; j++) {\r\n                            // Checking if the client appears on page 5.\r\n                            if (url.includes(res5.data[0].items[j].domain)) {\r\n                                setDF((DF) => [...DF, 1.1]); // If found, set the Distance Factor (DF) to 1.2 and stores in the DF array.\r\n                                setCurrentRanking((currentRanking) => [\r\n                                    ...currentRanking,\r\n                                    j + 41, // i + 41 will be their position on Google.\r\n                                ]);\r\n                                exit = true;\r\n                                break; // Breaks out of inner for loop.\r\n                            }\r\n                        }\r\n                        if (exit) {\r\n                            break; // Breaks out of outer while loop.\r\n                        }\r\n\r\n                        setDF((DF) => [...DF, 1]); // If not found on top 5, set distance factor (DF) to 1.\r\n                        setCurrentRanking((currentRanking) => [\r\n                            ...currentRanking,\r\n                            \"50+\",\r\n                        ]);\r\n                        break; // Breaks out of outer while loop.\r\n                    }\r\n                    setLoadMessage(\"all data fetched\");\r\n                    /******************************** END Getting Page 1 Info per keyword ********************************/\r\n\r\n                    /**************************** Getting FS for each competitor of Page 1 & 2 ***************************/\r\n\r\n                    for (let j = 0; j < res.data[0].items.length; j++) {\r\n                        // For each item on page 1:\r\n                        page[keywords[i]].values.push(\r\n                            // get the FS of page 1 via the getFS function and push the returned result to the page.[keyword].values for calculation later.\r\n                            getFS(\r\n                                res.data[0].items[j].m.moz.v.pda || 0,\r\n                                res.data[0].items[j].m.moz.v.upa || 0,\r\n                                res.data[0].items[j].m.majestic.v\r\n                                    .CitationFlow || 0,\r\n                                res.data[0].items[j].m.majestic.v.TrustFlow ||\r\n                                    0,\r\n                                res.data[0].items[j].m.majestic.v\r\n                                    .ExtBackLinks || 0,\r\n                                res.data[0].items[j].m.fb\r\n                                    ? res.data[0].items[j].m.fb.v.l || 0\r\n                                    : 0,\r\n                                res.data[0].items[j].m.rank.v.r || 0,\r\n                                checkEMD(\r\n                                    keywords[i],\r\n                                    \"https://mbg.com.sg:8081/https://\" +\r\n                                        res.data[0].items[j].domain +\r\n                                        \"/\"\r\n                                )\r\n                            )\r\n                        );\r\n                    }\r\n\r\n                    for (let b = 0; b < res2.data[0].items.length; b++) {\r\n                        // For each item on page 2:\r\n                        page[keywords[i]].values.push(\r\n                            // get the FS of page 2 via the getFS function and push the returned result to the page.[keyword].values for calculation later.\r\n                            getFS(\r\n                                res2.data[0].items[b].m.moz.v.pda || 0,\r\n                                res2.data[0].items[b].m.moz.v.upa || 0,\r\n                                res2.data[0].items[b].m.majestic.v\r\n                                    .CitationFlow || 0,\r\n                                res2.data[0].items[b].m.majestic.v.TrustFlow ||\r\n                                    0,\r\n                                res2.data[0].items[b].m.majestic.v\r\n                                    .ExtBackLinks || 0,\r\n                                res2.data[0].items[b].m.fb\r\n                                    ? res2.data[0].items[b].m.fb.v.l || 0\r\n                                    : 0,\r\n                                res2.data[0].items[b].m.rank.v.r || 0,\r\n                                checkEMD(\r\n                                    keywords[i],\r\n                                    \"https://mbg.com.sg:8081/https://\" +\r\n                                        res2.data[0].items[b].domain +\r\n                                        \"/\"\r\n                                )\r\n                            )\r\n                        );\r\n                    }\r\n\r\n                    page[keywords[i]].values.sort((a, b) => b - a); // Sorts the results based on the top 20 (or lesser) so that we can get the Q1, Q2, and Q3 for comparison.\r\n                    page[keywords[i]].q2 = // Getting Q2 results based on results 6, 7, 8, 9, 10.\r\n                        (page[keywords[i]].values[5] +\r\n                            page[keywords[i]].values[6] +\r\n                            page[keywords[i]].values[7] +\r\n                            page[keywords[i]].values[8] +\r\n                            page[keywords[i]].values[9]) /\r\n                        5;\r\n\r\n                    setAllQ2((allQ2) => [...allQ2, page[keywords[i]].q2]); // Setting Q2 results in the state.\r\n\r\n                    page[keywords[i]].q3 = // Getting Q3 results based on results 11, 12, 13, 14, 15.\r\n                        (page[keywords[i]].values[10] +\r\n                            page[keywords[i]].values[11] +\r\n                            page[keywords[i]].values[12] +\r\n                            page[keywords[i]].values[13] +\r\n                            page[keywords[i]].values[14]) /\r\n                        5;\r\n                    setAllQ3((allQ3) => [...allQ3, page[keywords[i]].q3]); // Setting Q3 results in the state.\r\n\r\n                    let temp = page[keywords[i]].values.slice(14);\r\n                    page[keywords[i]].q4 = // Getting Q3 results based on results 16 onwards. We don't check until 20 because sometimes there might be only 7-9 results on page 1 of Google.\r\n                        temp.reduce((a, b) => a + b) / temp.length; // Getting the average.\r\n                    setAllQ4((allQ4) => [...allQ4, page[keywords[i]].q4]); // Setting Q4 results in the state.\r\n                }\r\n                /**************************** END Getting FS for each competitor of Page 1 & 2 ***************************/\r\n                setLoad(true);\r\n            } catch (error) {\r\n                console.log(error.message);\r\n                setErrorMessage(error.message);\r\n            }\r\n        };\r\n        fetchClient();\r\n        getSvrk();\r\n        fetchData();\r\n    }, [keywords]); // Rerenders if keywords are changed. i.e. when user resubmits the main form.\r\n    /******************************** END UseEffect: Fetch data on submit (from UserInput.js) ********************************/\r\n\r\n    /******************************** UseEffect: Fetch data for new Keywords (from RelatedKeywordTable.js) ********************************/\r\n    useEffect(() => {\r\n        if (\r\n            extraRelatedKeywords !== prevKeywords &&\r\n            extraRelatedKeywords.length\r\n        ) {\r\n            setLoadMessage(\"Checking new keyword...\");\r\n            setExtraKW((extraKW) => [...extraKW, extraRelatedKeywords]);\r\n            setLoad(false);\r\n            const getSvrk = async () => {\r\n                try {\r\n                    let svrkResponse = await axios({\r\n                        // Calling the Mangools API to get the search volume for keywords[i].\r\n                        method: \"get\",\r\n                        url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/related-keywords/?kw=${extraRelatedKeywords}&location_id=${location.mangools}`,\r\n                        headers: {\r\n                            \"x-access-token\": KEY,\r\n                            \"Access-Control-Allow-Origin\": \"*\",\r\n                            \"Access-Control-Allow-Headers\":\r\n                                \"Content-Type, Authorization\",\r\n                        },\r\n                    });\r\n                    setVolume((volume) => [\r\n                        ...volume,\r\n                        svrkResponse.data.keywords[0].sv,\r\n                    ]);\r\n                    let tempKW = svrkResponse.data.keywords.slice(0, 50);\r\n                    setRelatedKeywords((relatedKeywords) => [\r\n                        ...relatedKeywords,\r\n                        tempKW,\r\n                    ]);\r\n                } catch (error) {\r\n                    setErrorMessage(error.message);\r\n                    console.log(error.message);\r\n                }\r\n            };\r\n            const fetchClient = async () => {\r\n                try {\r\n                    setCredit((credit) => credit + 1);\r\n\r\n                    page[extraRelatedKeywords] = {\r\n                        lps: 0,\r\n                        url: \"\",\r\n                        q2: 0,\r\n                        q3: 0,\r\n                        q4: 0,\r\n                        values: [],\r\n                    };\r\n                    let response = await axios({\r\n                        // Calling the Mangools API to get the most relevant page for keywords[i].\r\n                        method: \"get\",\r\n                        url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${url}%20${extraRelatedKeywords}&location_id=${location.mangools}`,\r\n                        headers: {\r\n                            \"x-access-token\": KEY,\r\n                            \"Access-Control-Allow-Origin\": \"*\",\r\n                            \"Access-Control-Allow-Headers\":\r\n                                \"Content-Type, Authorization\",\r\n                        },\r\n                    });\r\n\r\n                    // Setting URLs and LPS per keyword submitted\r\n\r\n                    page[extraRelatedKeywords].url =\r\n                        response.data[0].items[0].url;\r\n                    setAllUrls((allUrls) => [\r\n                        // Setting the URL for each keyword in the allUrls state.\r\n                        ...allUrls,\r\n                        response.data[0].items[0].url.slice(url.length - 1),\r\n                    ]);\r\n\r\n                    setFS((FS) => [\r\n                        // Getting the FS for each keyword and storing it in the \"FS\" state.\r\n                        ...FS,\r\n                        getFS(\r\n                            // Calls the getFS function and passes in the parameters based on results.\r\n                            response.data[0].items[0].m.moz.v.pda || 0,\r\n                            response.data[0].items[0].m.moz.v.upa || 0,\r\n                            response.data[0].items[0].m.majestic.v\r\n                                .CitationFlow || 0,\r\n                            response.data[0].items[0].m.majestic.v.TrustFlow ||\r\n                                0,\r\n                            response.data[0].items[0].m.majestic.v\r\n                                .ExtBackLinks || 0,\r\n                            response.data[0].items[0].m.fb.v.l || 0,\r\n                            response.data[0].items[0].m.rank.v.r || 0,\r\n                            checkEMD(extraRelatedKeywords, url)\r\n                        ),\r\n                    ]);\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    setErrorMessage(error.message);\r\n                }\r\n            };\r\n\r\n            /******************************** Getting Page 1 Info per keyword ********************************/\r\n            const fetchData = async () => {\r\n                try {\r\n                    setCredit((credit) => credit + 1);\r\n\r\n                    let res = await axios({\r\n                        // Fetching page 1 results for keywords[i].\r\n                        method: \"get\",\r\n                        url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${extraRelatedKeywords}&location_id=${location.mangools}`,\r\n                        headers: {\r\n                            \"x-access-token\": KEY,\r\n                            \"Access-Control-Allow-Origin\": \"*\",\r\n                            \"Access-Control-Allow-Headers\":\r\n                                \"Content-Type, Authorization\",\r\n                        },\r\n                    });\r\n                    setCredit((credit) => credit + 1);\r\n                    let res2 = await axios({\r\n                        // Fetching page 2 results for keywords[i].\r\n                        method: \"get\",\r\n                        url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${extraRelatedKeywords}&location_id=${location.mangools}&page=1`,\r\n                        headers: {\r\n                            \"x-access-token\": KEY,\r\n                            \"Access-Control-Allow-Origin\": \"*\",\r\n                            \"Access-Control-Allow-Headers\":\r\n                                \"Content-Type, Authorization\",\r\n                        },\r\n                    });\r\n\r\n                    setData((data) => [...data, res.data]); // Storing data as an object into the \"data\" state. Props for KeywordPageOneDisplay component.\r\n\r\n                    let exit = false;\r\n                    while (true) {\r\n                        setLoadMessage(`checking page 1`); // Settig load message.\r\n                        for (let j = 0; j < res.data[0].items.length; j++) {\r\n                            // Checking if the client appears on page 1.\r\n                            if (url.includes(res.data[0].items[j].domain)) {\r\n                                // If found, set the Distance Factor (DF) to 100 and stores in the DF array.\r\n                                setDF((DF) => [...DF, 100]);\r\n                                setCurrentRanking((currentRanking) => [\r\n                                    ...currentRanking,\r\n                                    j + 1, // j + 1 will be their position on Google.\r\n                                ]);\r\n                                exit = true;\r\n                                break; // Breaks out of inner for loop.\r\n                            }\r\n                        }\r\n                        if (exit) {\r\n                            break; // Breaks out of outer while loop.\r\n                        }\r\n\r\n                        setLoadMessage(`checking page 2`); // Settig load message.\r\n                        for (let j = 0; j < res2.data[0].items.length; j++) {\r\n                            // Checking if the client appears on page 2.\r\n                            if (url.includes(res2.data[0].items[j].domain)) {\r\n                                // If found, set the Distance Factor (DF) to 1.8 and stores in the DF array.\r\n                                setDF((DF) => [...DF, 1.8]);\r\n                                setCurrentRanking((currentRanking) => [\r\n                                    ...currentRanking,\r\n                                    j + 11, // j + 11 will be their position on Google.\r\n                                ]);\r\n                                exit = true;\r\n                                break; // Breaks out of inner for loop.\r\n                            }\r\n                        }\r\n                        if (exit) {\r\n                            break; // Breaks out of outer while loop.\r\n                        }\r\n                        setCredit((credit) => credit + 1);\r\n\r\n                        let res3 = await axios({\r\n                            // Fetching page 3 results for keywords[i] if the client is not found on page 1 or 2.\r\n                            method: \"get\",\r\n                            url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${extraRelatedKeywords}&location_id=${location.mangools}&page=2`,\r\n                            headers: {\r\n                                \"x-access-token\": KEY,\r\n                                \"Access-Control-Allow-Origin\": \"*\",\r\n                                \"Access-Control-Allow-Headers\":\r\n                                    \"Content-Type, Authorization\",\r\n                            },\r\n                        });\r\n\r\n                        for (let j = 0; j < res3.data[0].items.length; j++) {\r\n                            // Checking if the client appears on page 3.\r\n                            if (url.includes(res3.data[0].items[j].domain)) {\r\n                                setDF((DF) => [...DF, 1.4]); // If found, set the Distance Factor (DF) to 1.4 and stores in the DF array.\r\n                                setCurrentRanking((currentRanking) => [\r\n                                    ...currentRanking,\r\n                                    j + 21, // i + 21 will be their position on Google.\r\n                                ]);\r\n                                exit = true;\r\n                                break; // Breaks out of inner for loop.\r\n                            }\r\n                        }\r\n                        if (exit) {\r\n                            break; // Breaks out of outer while loop.\r\n                        }\r\n\r\n                        setCredit((credit) => credit + 1);\r\n                        let res4 = await axios({\r\n                            // Fetching page 3 results for extraRelatedKeywords if the client is not found on page 1, 2, or 3.\r\n                            method: \"get\",\r\n                            url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${extraRelatedKeywords}&location_id=${location.mangools}&page=3`,\r\n                            headers: {\r\n                                \"x-access-token\": KEY,\r\n                                \"Access-Control-Allow-Origin\": \"*\",\r\n                                \"Access-Control-Allow-Headers\":\r\n                                    \"Content-Type, Authorization\",\r\n                            },\r\n                        });\r\n\r\n                        for (let j = 0; j < res4.data[0].items.length; j++) {\r\n                            // Checking if the client appears on page 4.\r\n                            if (url.includes(res4.data[0].items[j].domain)) {\r\n                                setDF((DF) => [...DF, 1.2]); // If found, set the Distance Factor (DF) to 1.2 and stores in the DF array.\r\n                                setCurrentRanking((currentRanking) => [\r\n                                    ...currentRanking,\r\n                                    j + 31, // i + 31 will be their position on Google.\r\n                                ]);\r\n                                exit = true;\r\n                                break; // Breaks out of inner for loop.\r\n                            }\r\n                        }\r\n                        if (exit) {\r\n                            break; // Breaks out of outer while loop.\r\n                        }\r\n                        setCredit((credit) => credit + 1);\r\n\r\n                        let res5 = await axios({\r\n                            // Fetching page 3 results for extraRelatedKeywords if the client is not found on page 1, 2, 3, or 4.\r\n                            method: \"get\",\r\n                            url: `https://mbg.com.sg:8081/https://api.mangools.com/v2/kwfinder/serps/?kw=${extraRelatedKeywords}&location_id=${location.mangools}&page=4`,\r\n                            headers: {\r\n                                \"x-access-token\": KEY,\r\n                                \"Access-Control-Allow-Origin\": \"*\",\r\n                                \"Access-Control-Allow-Headers\":\r\n                                    \"Content-Type, Authorization\",\r\n                            },\r\n                        });\r\n\r\n                        for (let j = 0; j < res5.data[0].items.length; j++) {\r\n                            // Checking if the client appears on page 5.\r\n                            if (url.includes(res5.data[0].items[j].domain)) {\r\n                                setDF((DF) => [...DF, 1.1]); // If found, set the Distance Factor (DF) to 1.2 and stores in the DF array.\r\n                                setCurrentRanking((currentRanking) => [\r\n                                    ...currentRanking,\r\n                                    j + 41, // i + 41 will be their position on Google.\r\n                                ]);\r\n                                exit = true;\r\n                                break; // Breaks out of inner for loop.\r\n                            }\r\n                        }\r\n                        if (exit) {\r\n                            break; // Breaks out of outer while loop.\r\n                        }\r\n\r\n                        setDF((DF) => [...DF, 1]); // If not found on top 5, set distance factor (DF) to 1.\r\n                        setCurrentRanking((currentRanking) => [\r\n                            ...currentRanking,\r\n                            \"50+\",\r\n                        ]);\r\n                        break; // Breaks out of outer while loop.\r\n                    }\r\n                    /******************************** END Getting Page 1 Info per keyword ********************************/\r\n\r\n                    /**************************** Getting FS for each competitor of Page 1 & 2 ***************************/\r\n\r\n                    for (let j = 0; j < res.data[0].items.length; j++) {\r\n                        // For each item on page 1:\r\n                        page[extraRelatedKeywords].values.push(\r\n                            // get the FS of page 1 via the getFS function and push the returned result to the page.[keyword].values for calculation later.\r\n                            getFS(\r\n                                res.data[0].items[j].m.moz.v.pda || 0,\r\n                                res.data[0].items[j].m.moz.v.upa || 0,\r\n                                res.data[0].items[j].m.majestic.v\r\n                                    .CitationFlow || 0,\r\n                                res.data[0].items[j].m.majestic.v.TrustFlow ||\r\n                                    0,\r\n                                res.data[0].items[j].m.majestic.v\r\n                                    .ExtBackLinks || 0,\r\n                                res.data[0].items[j].m.fb\r\n                                    ? res.data[0].items[j].m.fb.v.l || 0\r\n                                    : 0,\r\n                                res.data[0].items[j].m.rank.v.r || 0,\r\n                                checkEMD(\r\n                                    extraRelatedKeywords,\r\n                                    \"https://mbg.com.sg:8081/https://\" +\r\n                                        res.data[0].items[j].domain +\r\n                                        \"/\"\r\n                                )\r\n                            )\r\n                        );\r\n                    }\r\n\r\n                    for (let b = 0; b < res2.data[0].items.length; b++) {\r\n                        // For each item on page 2:\r\n                        page[extraRelatedKeywords].values.push(\r\n                            // get the FS of page 2 via the getFS function and push the returned result to the page.[keyword].values for calculation later.\r\n                            getFS(\r\n                                res2.data[0].items[b].m.moz.v.pda || 0,\r\n                                res2.data[0].items[b].m.moz.v.upa || 0,\r\n                                res2.data[0].items[b].m.majestic.v\r\n                                    .CitationFlow || 0,\r\n                                res2.data[0].items[b].m.majestic.v.TrustFlow ||\r\n                                    0,\r\n                                res2.data[0].items[b].m.majestic.v\r\n                                    .ExtBackLinks || 0,\r\n                                res2.data[0].items[b].m.fb\r\n                                    ? res2.data[0].items[b].m.fb.v.l || 0\r\n                                    : 0,\r\n                                res2.data[0].items[b].m.rank.v.r || 0,\r\n                                checkEMD(\r\n                                    extraRelatedKeywords,\r\n                                    \"https://mbg.com.sg:8081/https://\" +\r\n                                        res2.data[0].items[b].domain +\r\n                                        \"/\"\r\n                                )\r\n                            )\r\n                        );\r\n                    }\r\n\r\n                    page[extraRelatedKeywords].values.sort((a, b) => b - a); // Sorts the results based on the top 20 (or lesser) so that we can get the Q1, Q2, and Q3 for comparison.\r\n                    page[extraRelatedKeywords].q2 = // Getting Q2 results based on results 6, 7, 8, 9, 10.\r\n                        (page[extraRelatedKeywords].values[5] +\r\n                            page[extraRelatedKeywords].values[6] +\r\n                            page[extraRelatedKeywords].values[7] +\r\n                            page[extraRelatedKeywords].values[8] +\r\n                            page[extraRelatedKeywords].values[9]) /\r\n                        5;\r\n\r\n                    setAllQ2((allQ2) => [\r\n                        ...allQ2,\r\n                        page[extraRelatedKeywords].q2,\r\n                    ]); // Setting Q2 results in the state.\r\n\r\n                    page[extraRelatedKeywords].q3 = // Getting Q3 results based on results 11, 12, 13, 14, 15.\r\n                        (page[extraRelatedKeywords].values[10] +\r\n                            page[extraRelatedKeywords].values[11] +\r\n                            page[extraRelatedKeywords].values[12] +\r\n                            page[extraRelatedKeywords].values[13] +\r\n                            page[extraRelatedKeywords].values[14]) /\r\n                        5;\r\n                    setAllQ3((allQ3) => [\r\n                        ...allQ3,\r\n                        page[extraRelatedKeywords].q3,\r\n                    ]); // Setting Q3 results in the state.\r\n\r\n                    let temp = page[extraRelatedKeywords].values.slice(14);\r\n                    page[extraRelatedKeywords].q4 = // Getting Q3 results based on results 16 onwards. We don't check until 20 because sometimes there might be only 7-9 results on page 1 of Google.\r\n                        temp.reduce((a, b) => a + b) / temp.length; // Getting the average.\r\n                    setAllQ4((allQ4) => [\r\n                        ...allQ4,\r\n                        page[extraRelatedKeywords].q4,\r\n                    ]); // Setting Q4 results in the state.\r\n\r\n                    /**************************** END Getting FS for each competitor of Page 1 & 2 ***************************/\r\n                } catch (error) {\r\n                    console.log(error.message);\r\n                    setErrorMessage(error.message);\r\n                } finally {\r\n                    setLoad(true);\r\n                }\r\n            };\r\n            fetchClient();\r\n            getSvrk();\r\n            fetchData();\r\n        }\r\n    });\r\n    /******************************** END UseEffect: Fetch data on submit (from RelatedKeywordTable.js) ********************************/\r\n\r\n    const handleShow = (index) => {\r\n        // handleShow for the KeywordPageOneDisplay component.\r\n        setShow(true);\r\n        setDisplayKeyword(keywords[index]);\r\n        setDisplayData(data[index]);\r\n        setDisplayRelatedKeywords(relatedKeywords[index]);\r\n    };\r\n\r\n    return (\r\n        <div style={{ marginBottom: \"20px\" }}>\r\n            <CustomPrompt />\r\n            <h2>\r\n                Checking {url} in {location.sem.toUpperCase()}.\r\n            </h2>\r\n            <p>Credits used for this search: {credit}</p>\r\n            {/** Displays the credit used for each search. **/}\r\n            {load ? (\r\n                \"\"\r\n            ) : (\r\n                <div>\r\n                    <ClipLoader size={10} color={\"#123abc\"} />\r\n                    {/** Displays the loading icon when the functions are running **/}\r\n                    <p>{loadMessage}</p>\r\n                </div>\r\n            )}\r\n            <ResultsDisplay // Once all the data is fetched, it will be displayed in this component.\r\n                keywords={keywords}\r\n                load={load}\r\n                handleShow={handleShow}\r\n                currentRanking={currentRanking}\r\n                volume={volume}\r\n                FS={FS}\r\n                DF={DF}\r\n                allQ2={allQ2}\r\n                allQ3={allQ3}\r\n                allQ4={allQ4}\r\n                allUrls={allUrls}\r\n                extraKW={extraKW}\r\n                setExtraRelatedKeywords={setExtraRelatedKeywords}\r\n            />\r\n            {errorMessage ? (\r\n                <p style={{ color: \"red\" }}>\r\n                    An error has occured: {errorMessage}\r\n                </p>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n            {show ? (\r\n                <div>\r\n                    <KeywordPageOneDisplay\r\n                        keyword={displayKeyword}\r\n                        data={displayData}\r\n                        setShow={setShow}\r\n                    />\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <RelatedKeywordTable\r\n                            displayRelatedKeywords={displayRelatedKeywords}\r\n                            setExtraRelatedKeywords={setExtraRelatedKeywords}\r\n                            load={load}\r\n                            keywords={keywords}\r\n                            extraRelatedKeywords={extraRelatedKeywords}\r\n                            text={\"Low\"}\r\n                        />\r\n                        <RelatedKeywordTable\r\n                            displayRelatedKeywords={displayRelatedKeywords}\r\n                            setExtraRelatedKeywords={setExtraRelatedKeywords}\r\n                            load={load}\r\n                            keywords={keywords}\r\n                            extraRelatedKeywords={extraRelatedKeywords}\r\n                            text={\"Medium\"}\r\n                        />\r\n                        <RelatedKeywordTable\r\n                            displayRelatedKeywords={displayRelatedKeywords}\r\n                            setExtraRelatedKeywords={setExtraRelatedKeywords}\r\n                            load={load}\r\n                            keywords={keywords}\r\n                            extraRelatedKeywords={extraRelatedKeywords}\r\n                            text={\"Hard\"}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainFunction;\r\n","import { createContext } from \"react\";\r\n\r\nconst UserContext = createContext(null);\r\n\r\nexport default UserContext;\r\n","import React, { useContext } from \"react\";\r\nimport UserContext from \"../context/UserContext\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AppBar, Toolbar, Button } from \"@material-ui/core\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        fontWeight: 600,\r\n    },\r\n}));\r\n\r\nconst NavBar = () => {\r\n    const { user } = useContext(UserContext);\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position='static'>\r\n                <Toolbar>\r\n                    <Link to='/app'>\r\n                        <Button className={classes.title}>MediaOne</Button>\r\n                    </Link>\r\n                    {user ? (\r\n                        <>\r\n                            <Link to='/app/keyword-timeline-analysis'>\r\n                                <Button className={classes.title}>\r\n                                    Keyword Timeline Analysis\r\n                                </Button>\r\n                            </Link>\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useState, useContext } from \"react\";\r\nimport UserContext from \"../context/UserContext\";\r\nimport { FormControl, TextField, Button } from \"@material-ui/core\";\r\n\r\nlet PASSWORD = process.env.REACT_APP_PASSWORD;\r\n//let PASSWORD = 'bM5!xS3_oB';\r\nconst Login = () => {\r\n    const { user, setUser } = useContext(UserContext);\r\n    const [status, setStatus] = useState();\r\n    const [username, setUsername] = useState();\r\n    const [password, setPassword] = useState();\r\n    const handleSubmit = async (event) => {\r\n        setStatus(\"\");\r\n        event.preventDefault();\r\n        if (\r\n            (username.toLowerCase() === \"mediaone\" ||\r\n                username.toLowerCase() === \"tom\" ||\r\n                username.toLowerCase() === \"sales\" ||\r\n                username.toLowerCase() === \"seo\") &&\r\n            password === PASSWORD\r\n        ) {\r\n            setStatus(\"\");\r\n            await setUser(username);\r\n            await sessionStorage.setItem(\"user\", username);\r\n        } else {\r\n            setStatus(\"Invalid Username or Password \");\r\n        }\r\n    };\r\n\r\n    const handleLogout = async (event) => {\r\n        event.preventDefault();\r\n        await setUser(null);\r\n        await sessionStorage.clear();\r\n    };\r\n\r\n    return (\r\n        <div className='container'>\r\n            {user ? (\r\n                <>\r\n                    <h1>\r\n                        Greetings {user.charAt(0).toUpperCase() + user.slice(1)}\r\n                    </h1>\r\n                    <Button\r\n                        variant='contained'\r\n                        color='secondary'\r\n                        onClick={(e) => {\r\n                            handleLogout(e);\r\n                        }}\r\n                    >\r\n                        Log out\r\n                    </Button>\r\n                </>\r\n            ) : (\r\n                <div>\r\n                    <div>\r\n                        <h1>Login</h1>\r\n                        <form\r\n                            onSubmit={(event) => {\r\n                                handleSubmit(event);\r\n                            }}\r\n                        >\r\n                            <FormControl fullWidth>\r\n                                <TextField\r\n                                    type='text'\r\n                                    margin='normal'\r\n                                    label='Username'\r\n                                    fullWidth\r\n                                    value={username || \"\"}\r\n                                    onChange={(e) => {\r\n                                        setUsername(e.target.value);\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl fullWidth>\r\n                                <TextField\r\n                                    type='password'\r\n                                    margin='normal'\r\n                                    label='Password'\r\n                                    fullWidth\r\n                                    value={password || \"\"}\r\n                                    onChange={(e) => {\r\n                                        setPassword(e.target.value);\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </FormControl>\r\n                            <div>\r\n                                <Button\r\n                                    type='submit'\r\n                                    variant='contained'\r\n                                    color='secondary'\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </div>\r\n                            <p>{status}</p>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route,\r\n    Switch,\r\n    Redirect,\r\n} from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport UserInput from \"./components/Keywords/UserInput\";\r\nimport MainFunction from \"./components/Keywords/MainFunction\"; // MainFunction page after submitting the form.\r\n\r\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { cyan, red } from \"@material-ui/core/colors\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Login from \"./components/Login\";\r\n\r\nimport UserContext from \"./context/UserContext\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: cyan,\r\n        secondary: red,\r\n    },\r\n});\r\n\r\nfunction App() {\r\n    ///// User Context /////\r\n    const [user, setUser] = useState(sessionStorage.getItem(\"user\") || null);\r\n\r\n    ///// User Input /////\r\n    const [submitted, setSubmitted] = useState(false); // Keeps track on whether the form is submitted. On submit, render the results page.\r\n    const [URL, setURL] = useState(\"\"); // URL to check.\r\n    const [chosenLocation, setChosenLocation] = useState({\r\n        mangools: 2702,\r\n        sem: \"sg\",\r\n    }); // Data to pass to children as props based on selected country. Default Singapore's location data.\r\n    const [formattedKeywords, setFormattedKeywords] = useState([]); // Formats the keywords and stores into an array.\r\n\r\n    ///// MainFunction /////\r\n    return (\r\n        <Router>\r\n            <UserContext.Provider value={{ user, setUser }}>\r\n                <ThemeProvider theme={theme}>\r\n                    <NavBar />\r\n                    <Container className='App' maxWidth='xl'>\r\n                        {user === null ? <Redirect to='/app' /> : \"\"}\r\n                        <Switch>\r\n                            <Route path='/app/keyword-timeline-analysis'>\r\n                                {submitted ? ( // Renders results after submission.\r\n                                    <MainFunction\r\n                                        url={URL}\r\n                                        keywords={formattedKeywords}\r\n                                        location={chosenLocation}\r\n                                        setFormattedKeywords={\r\n                                            setFormattedKeywords\r\n                                        }\r\n                                    />\r\n                                ) : (\r\n                                    <UserInput\r\n                                        setSubmitted={setSubmitted}\r\n                                        setChosenLocation={setChosenLocation}\r\n                                        setFormattedKeywords={\r\n                                            setFormattedKeywords\r\n                                        }\r\n                                        URL={URL}\r\n                                        setURL={setURL}\r\n                                    />\r\n                                )}\r\n                            </Route>\r\n                            <Route exact path='/app'>\r\n                                <Login />\r\n                            </Route>\r\n                            <Route path='/*'>\r\n                                <Redirect to='/app' />\r\n                            </Route>\r\n                        </Switch>\r\n                    </Container>\r\n                </ThemeProvider>\r\n            </UserContext.Provider>\r\n            <footer>\r\n                <a href='https://mediaonemarketing.com.sg/'>\r\n                    Mediaone Business Group\r\n                </a>\r\n            </footer>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}